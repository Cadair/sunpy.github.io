Transition from `datetime` to `astropy.time`
============================================

.. post:: Oct 20, 2018
   :author: Vishnunarayan K I
   :tags: sunpy, time, gsoc
   :category: GSoC

The SunPy project is very happy to announce that the time handling in SunPy will
be transitioned from python `datetime` module to `astropy.time` module.
The changes for this transition are under review in the pull request 
`#2691 <https://github.com/sunpy/sunpy/pull/2691>`_.
These changes are scheduled for **SunPy 1.0**.

This comes with numerous benefits:

- **Support for non-UTC time scales.**

  UTC as well as non-UTC time scales like TAI, TT, UT1 etc. can be used with `astropy.time.Time`. 

  .. code:: python

      >>> t = Time('2012-06-18T02:00:05.453', scale='tai')
      >>> t
      <Time object: scale='tai' format='isot' value=2012-06-18T02:00:05.453>

  `~astropy.time.Time` also provides easy conversion between different scales.

  .. code:: python

      >>> t.utc
      <Time object: scale='utc' format='isot' value=2012-06-18T01:59:31.453>


- **Support for high precision times.**

  `~astropy.time.Time` can provide sub-nanosecond precision for time objects while python
  `datetime` was restricted to microseconds.

  .. code:: python

    >>> t = Time('2012-06-18T02:00:05.453123123')
    >>> t
    <Time object: scale='utc' format='isot' value=2012-06-18T02:00:05.453>
    >>> t.precision = 9
    >>> t
    <Time object: scale='utc' format='isot' value=2012-06-18T02:00:05.453123123>

- **Support for leap seconds**

  This was one of the bigger motivation for the transition to `astropy.time.Time`.
  `datetime` has no support for leap second while `~astropy.time.Time` supports leap seconds.
  A leap second is a one-second adjustment applied to UTC to keep it close to the mean solar time.

  .. code:: python

    >>> Time('2016-12-31T23:59:60')
    <Time object: scale='utc' format='isot' value=2016-12-31T23:59:60.000>

    >>> Time('2016-12-31T23:59:59') + 1 * u.s
    <Time object: scale='utc' format='isot' value=2016-12-31T23:59:60.000>

- **Support for numerous formats**

  `~astropy.time.Time` can parse numerous formats including python `datetime`.

  .. code:: python

    >>> list(Time.FORMATS)
    ['jd', 'mjd', 'decimalyear', 'unix', 'cxcsec', 'gps', 'plot_date', 'datetime', 'iso', 'isot', 'yday', 'fits', 'byear', 'jyear', 'byear_str', 'jyear_str'] 

  .. code:: python
    
    >>> import datetime
    >>> Time(datetime.datetime.now())
    <Time object: scale='utc' format='datetime' value=2018-10-20 15:36:16.364089>

Changes to SunPy
++++++++++++++++

- **All functions which used to return** `datetime` **now return** `~astropy.time.Time`

  And all functions which return `datetime.timedelta` now return `astropy.time.TimeDelta`.
  For example, the properties of `sunpy.time.TimeRange` which 
  used to return `datetime.datetime` and `datetime.timedelta` now return `astropy.time.Time`
  and `astropy.time.TimeDelta`

- **Changes to** `~sunpy.time.parse_time`

  `~sunpy.time.parse_time` has been reduced to a tiny wrapper over `~astropy.time.Time`. 
  The API of `~sunpy.time.parse_time` is mostly similar to that of `~astropy.time.Time`. 
  `~sunpy.time.parse_time` supports parsing a few more formats than `~astropy.time.Time`, which
  are `numpy.datetime64`, `pandas.Series`, `pandas.DatetimeIndex`, utime and a few other time formats.


The work on the transtion from `datetime` to `astropy.time.Time` was done as a part of 
Vishnunarayan's Google Summer of Code 2018 project.
To see more about the project:

- `Vishnunarayan's Medium Blog Posts <https://medium.com/@appukuttancr>`_
- `GSoC Project Page <https://summerofcode.withgoogle.com/projects/#6118064853090304>`_
